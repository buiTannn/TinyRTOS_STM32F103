


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             OSASM, CODE, READONLY
    2 00000000                 PRESERVE8
    3 00000000                 THUMB
    4 00000000         
    5 00000000                 EXPORT           OS_DisableInterrupts
    6 00000000                 EXPORT           OS_EnableInterrupts
    7 00000000                 EXPORT           StartOS
    8 00000000                 EXPORT           PendSV_Handler
    9 00000000         
   10 00000000                 EXTERN           RunPt
   11 00000000                 EXTERN           OS_Scheduler
   12 00000000         
   13 00000000         ; Simple interrupt control functions
   14 00000000         OS_DisableInterrupts
   15 00000000 B672            CPSID            I
   16 00000002 4770            BX               LR
   17 00000004         
   18 00000004         OS_EnableInterrupts
   19 00000004 B662            CPSIE            I
   20 00000006 4770            BX               LR
   21 00000008         
   22 00000008         ; StartOS - Initialize first thread (Keil syntax, adapte
                       d from F3)
   23 00000008         StartOS
   24 00000008 B672            CPSID            I           ; disable interrupt
                                                            s
   25 0000000A 483B            LDR              R0, =RunPt  ; R0 = &RunPt;  // 
                                                            TCB_t** R0 = &RunPt
                                                            
   26 0000000C 6801            LDR              R1, [R0]    ; R1 = *R0;     // 
                                                            TCB_t*  R1 = RunPt
   27 0000000E         
   28 0000000E         ; Validate RunPt is not NULL
   29 0000000E 2900            CMP              R1, #0
   30 00000010 D02C            BEQ              StartOS_Error
   31 00000012         
   32 00000012 F8D1 D000       LDR              SP, [R1]    ; SP = *R1;     // 
                                                            uint32_t SP = *(Run
                                                            Pt->sp)
   33 00000016         
   34 00000016         ; Validate SP range for STM32F103 (20KB RAM: 0x20000000-
                       0x20005000)
   35 00000016 4A39            LDR              R2, =0x20000200 ; Min valid SP 
                                                            (after globals)
   36 00000018 4595            CMP              SP, R2
   37 0000001A D327            BLO              StartOS_Error
   38 0000001C         
   39 0000001C 4A38            LDR              R2, =0x20004F00 
                                                            ; Max valid SP  
   40 0000001E 4595            CMP              SP, R2
   41 00000020 D224            BHS              StartOS_Error
   42 00000022         
   43 00000022         ; Check 8-byte alignment
   44 00000022 466B            MOV              R3, SP
   45 00000024 F013 0F07       TST              R3, #0x07
   46 00000028         
   47 00000028 D120            BNE              StartOS_Error
   48 0000002A         
   49 0000002A         ; Now we switched to the thread's stack, restore context



ARM Macro Assembler    Page 2 


                       
   50 0000002A         ; ULTRA SAFE: Manual stack operations to avoid any UNPRE
                       DICTABLE
   51 0000002A 9C00            LDR              R4, [SP]    ; Load R4 from stac
                                                            k
   52 0000002C B001            ADD              SP, SP, #4  ; Move SP up
   53 0000002E 9D00            LDR              R5, [SP]    ; Load R5 from stac
                                                            k
   54 00000030 B001            ADD              SP, SP, #4  ; Move SP up
   55 00000032 9E00            LDR              R6, [SP]    ; Load R6 from stac
                                                            k
   56 00000034 B001            ADD              SP, SP, #4  ; Move SP up
   57 00000036 9F00            LDR              R7, [SP]    ; Load R7 from stac
                                                            k
   58 00000038 B001            ADD              SP, SP, #4  ; Move SP up
   59 0000003A F8DD 8000       LDR              R8, [SP]    ; Load R8 from stac
                                                            k
   60 0000003E B001            ADD              SP, SP, #4  ; Move SP up
   61 00000040 F8DD 9000       LDR              R9, [SP]    ; Load R9 from stac
                                                            k
   62 00000044 B001            ADD              SP, SP, #4  ; Move SP up
   63 00000046 F8DD A000       LDR              R10, [SP]   ; Load R10 from sta
                                                            ck
   64 0000004A B001            ADD              SP, SP, #4  ; Move SP up
   65 0000004C F8DD B000       LDR              R11, [SP]   ; Load R11 from sta
                                                            ck
   66 00000050 B001            ADD              SP, SP, #4  ; Move SP up
   67 00000052 BC01            POP              {R0}        ; pop R0
   68 00000054 BC02            POP              {R1}        ; pop R1
   69 00000056 BC04            POP              {R2}        ; pop R2
   70 00000058 BC08            POP              {R3}        ; pop R3
   71 0000005A F85D CB04       POP              {R12}       ; pop R12
   72 0000005E F85D EB04       POP              {LR}        ; discard saved LR
   73 00000062 F85D EB04       POP              {LR}        ; pop PC to the lin
                                                            k register (task st
                                                            art)
   74 00000066 BC02            POP              {R1}        ; discard PSR
   75 00000068 B662            CPSIE            I           ; enable interrupts
                                                            
   76 0000006A 4770            BX               LR          ; start first threa
                                                            d
   77 0000006C         
   78 0000006C         StartOS_Error
   79 0000006C 4825            LDR              R0, =0xBADC0DE1 
                                                            ; Error signature
   80 0000006E E7FD            B                StartOS_Error ; Hang for debugg
                                                            ing
   81 00000070         
   82 00000070         ; PendSV_Handler - Context switch (Keil syntax, adapted 
                       from F3)
   83 00000070         PendSV_Handler
   84 00000070         ; Hardware automatically saves R0-R3, R12, LR, PC, PSR t
                       o stack
   85 00000070         
   86 00000070         ; Quick safety check
   87 00000070 4821            LDR              R0, =RunPt  ; R0 = &RunPt
   88 00000072 6801            LDR              R1, [R0]    ; R1 = RunPt
   89 00000074 2900            CMP              R1, #0
   90 00000076 D039            BEQ              PendSV_Exit



ARM Macro Assembler    Page 3 


   91 00000078         
   92 00000078 B672            CPSID            I           ; prevent interrupt
                                                             during context-swi
                                                            tch
   93 0000007A         
   94 0000007A         ; SAFE: Use individual PUSH operations to avoid UNPREDIC
                       TABLE
   95 0000007A B410            PUSH             {R4}        ; save R4
   96 0000007C B420            PUSH             {R5}        ; save R5
   97 0000007E B440            PUSH             {R6}        ; save R6
   98 00000080 B480            PUSH             {R7}        ; save R7
   99 00000082 F84D 8D04       PUSH             {R8}        ; save R8
  100 00000086 F84D 9D04       PUSH             {R9}        ; save R9
  101 0000008A F84D AD04       PUSH             {R10}       ; save R10
  102 0000008E F84D BD04       PUSH             {R11}       ; save R11
  103 00000092         
  104 00000092         ; Validate current stack
  105 00000092 466A            MOV              R2, SP
  106 00000094 4B19            LDR              R3, =0x20000200 
                                                            ; Min stack address
                                                            
  107 00000096 429A            CMP              R2, R3
  108 00000098 D329            BLO              PendSV_Error ; Stack underflow
  109 0000009A         
  110 0000009A 4B19            LDR              R3, =0x20004F00 ; Max stack add
                                                            ress  
  111 0000009C 429A            CMP              R2, R3
  112 0000009E D226            BHS              PendSV_Error ; Stack overflow
  113 000000A0         
  114 000000A0 F8C1 D000       STR              SP, [R1]    ; Save current SP: 
                                                            *(RunPt->sp) = SP
  115 000000A4         
  116 000000A4         ; Call scheduler - preserve R0 and LR for function call
  117 000000A4 B401            PUSH             {R0}        ; push R0
  118 000000A6 B500            PUSH             {LR}        ; push LR (8-byte a
                                                            ligned)
  119 000000A8 F7FF FFFE       BL               OS_Scheduler ; call OS_Schedule
                                                            r, RunPt is updated
                                                            
  120 000000AC F85D EB04       POP              {LR}        ; restore LR
  121 000000B0 BC01            POP              {R0}        ; restore R0
  122 000000B2         
  123 000000B2         ; Load new thread context
  124 000000B2 6801            LDR              R1, [R0]    ; R1 = RunPt (new t
                                                            hread)
  125 000000B4 2900            CMP              R1, #0      ; Check for NULL
  126 000000B6 D01A            BEQ              PendSV_Error
  127 000000B8         
  128 000000B8 F8D1 D000       LDR              SP, [R1]    ; SP = *(RunPt->sp)
                                                             - switch to new th
                                                            read's stack
  129 000000BC         
  130 000000BC         ; Validate new SP
  131 000000BC 4A0F            LDR              R2, =0x20000200
  132 000000BE 4595            CMP              SP, R2
  133 000000C0 D315            BLO              PendSV_Error ; Invalid SP
  134 000000C2         
  135 000000C2 4A0F            LDR              R2, =0x20004F00
  136 000000C4 4595            CMP              SP, R2



ARM Macro Assembler    Page 4 


  137 000000C6 D212            BHS              PendSV_Error ; Invalid SP
  138 000000C8         
  139 000000C8         ; Check alignment
  140 000000C8 466B            MOV              R3, SP
  141 000000CA F013 0F07       TST              R3, #0x07
  142 000000CE         
  143 000000CE D10E            BNE              PendSV_Error ; Not aligned
  144 000000D0         
  145 000000D0         ; SAFE: Use individual POP operations (reverse order)
  146 000000D0 F85D BB04       POP              {R11}       ; restore R11
  147 000000D4 F85D AB04       POP              {R10}       ; restore R10
  148 000000D8 F85D 9B04       POP              {R9}        ; restore R9
  149 000000DC F85D 8B04       POP              {R8}        ; restore R8
  150 000000E0 BC80            POP              {R7}        ; restore R7
  151 000000E2 BC40            POP              {R6}        ; restore R6
  152 000000E4 BC20            POP              {R5}        ; restore R5
  153 000000E6 BC10            POP              {R4}        ; restore R4
  154 000000E8         
  155 000000E8 B662            CPSIE            I           ; tasks run with in
                                                            terrupts enabled
  156 000000EA 4770            BX               LR          ; return - hardware
                                                             restores R0-R3,R12
                                                            ,LR,PC,PSR
  157 000000EC         
  158 000000EC         PendSV_Exit
  159 000000EC 4770            BX               LR
  160 000000EE         
  161 000000EE         PendSV_Error
  162 000000EE         ; Stack corruption or invalid state detected
  163 000000EE 4806            LDR              R0, =0xDEADBEEF 
                                                            ; Error signature
  164 000000F0 4669            MOV              R1, SP      ; Current SP for de
                                                            bugging
  165 000000F2 4A01            LDR              R2, =RunPt
  166 000000F4 6812            LDR              R2, [R2]    ; RunPt value
  167 000000F6 E7FA            B                PendSV_Error ; Infinite loop - 
                                                            set breakpoint here
                                                            
  168 000000F8         
  169 000000F8                 END
              00000000 
              20000200 
              20004F00 
              BADC0DE1 
              DEADBEEF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=tinyrtos_stm32f103\os_asm.d -otinyrtos_stm32f103\os_asm.o -I.\RTE\
_TinyRTOS_STM32F103 -IC:\Users\buiqu\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CM
SIS\Core\Include -IC:\Users\buiqu\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.
4.1\Device\Include --predefine="__UVISION_VERSION SETA 529" --predefine="_RTE_ 
SETA 1" --predefine="STM32F10X_MD SETA 1" --list=os_asm.lst ..\Core\Src\os_asm.
s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

OSASM 00000000

Symbol: OSASM
   Definitions
      At line 1 in file ..\Core\Src\os_asm.s
   Uses
      None
Comment: OSASM unused
OS_DisableInterrupts 00000000

Symbol: OS_DisableInterrupts
   Definitions
      At line 14 in file ..\Core\Src\os_asm.s
   Uses
      At line 5 in file ..\Core\Src\os_asm.s
Comment: OS_DisableInterrupts used once
OS_EnableInterrupts 00000004

Symbol: OS_EnableInterrupts
   Definitions
      At line 18 in file ..\Core\Src\os_asm.s
   Uses
      At line 6 in file ..\Core\Src\os_asm.s
Comment: OS_EnableInterrupts used once
PendSV_Error 000000EE

Symbol: PendSV_Error
   Definitions
      At line 161 in file ..\Core\Src\os_asm.s
   Uses
      At line 108 in file ..\Core\Src\os_asm.s
      At line 112 in file ..\Core\Src\os_asm.s
      At line 126 in file ..\Core\Src\os_asm.s
      At line 133 in file ..\Core\Src\os_asm.s
      At line 137 in file ..\Core\Src\os_asm.s
      At line 143 in file ..\Core\Src\os_asm.s
      At line 167 in file ..\Core\Src\os_asm.s

PendSV_Exit 000000EC

Symbol: PendSV_Exit
   Definitions
      At line 158 in file ..\Core\Src\os_asm.s
   Uses
      At line 90 in file ..\Core\Src\os_asm.s
Comment: PendSV_Exit used once
PendSV_Handler 00000070

Symbol: PendSV_Handler
   Definitions
      At line 83 in file ..\Core\Src\os_asm.s
   Uses
      At line 8 in file ..\Core\Src\os_asm.s
Comment: PendSV_Handler used once
StartOS 00000008

Symbol: StartOS
   Definitions
      At line 23 in file ..\Core\Src\os_asm.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 7 in file ..\Core\Src\os_asm.s
Comment: StartOS used once
StartOS_Error 0000006C

Symbol: StartOS_Error
   Definitions
      At line 78 in file ..\Core\Src\os_asm.s
   Uses
      At line 30 in file ..\Core\Src\os_asm.s
      At line 37 in file ..\Core\Src\os_asm.s
      At line 41 in file ..\Core\Src\os_asm.s
      At line 47 in file ..\Core\Src\os_asm.s
      At line 80 in file ..\Core\Src\os_asm.s

8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OS_Scheduler 00000000

Symbol: OS_Scheduler
   Definitions
      At line 11 in file ..\Core\Src\os_asm.s
   Uses
      At line 119 in file ..\Core\Src\os_asm.s
Comment: OS_Scheduler used once
RunPt 00000000

Symbol: RunPt
   Definitions
      At line 10 in file ..\Core\Src\os_asm.s
   Uses
      At line 25 in file ..\Core\Src\os_asm.s
      At line 87 in file ..\Core\Src\os_asm.s
      At line 165 in file ..\Core\Src\os_asm.s

2 symbols
345 symbols in table
